====================================================================================================
Función actual:  main
====================================================================================================
Atributos de la función:  [
  {
    type: 'LetInDeclaration',
    declarations: [ [Object] ],
    body: { type: 'Block', statements: [Array], id: 3 },
    id: 0
  },
  { type: 'ConstDeclaration', name: 'z', value: 4, id: 4 },
  {
    type: 'FunctionDeclaration',
    name: 'goo',
    params: [ 'y' ],
    body: {
      type: 'BinaryExpression',
      left: [Object],
      operator: '+',
      right: 'z',
      id: 7
    },
    id: 11
  },
  { type: 'Block', statements: [ [Object], [Object] ], id: 12 },
  { type: 'FunctionCall', functionName: 'goo', args: [ 3 ], id: 13 },
  { type: 'PrintStatement', args: [ [Object] ], id: 14 }
]
====================================================================================================
Función actual:  goo
====================================================================================================
Atributos de la función:  [
  {
    type: 'Block',
    statements: { type: 'ReturnStatement', value: [Object], id: 9 },
    id: 10
  }
]
Instrucciones:  [
  ';================ main ====================',
  '$FUN $0 args:0 parent:$0 ;main',
  'LDV 2',
  'BST 0 0                              ;x',
  'LDV 4',
  'BST 0 1                              ;z',
  'LDV 3',
  'LDF $1',
  'APP  1                ; goo(3)',
  'PRN',
  'HLT',
  '$END',
  ';================ goo ====================',
  '$FUN $1 args:1 parent:$0 ;goo',
  'BLD 1 1                              ;z',
  'BLD 0 0                              ;y',
  'BLD 1 0                              ;x',
  'LDV "foo"',
  'CAT',
  'CAT',
  'CAT',
  'RET',
  '$END'
]
undefined
Archivo fuente: ./test/test_funcionales/versionCompleja9.bies
Archivo de salida (sysout): outputsParser\versionCompleja9_output.basm
Archivo de errores (syserr): outputsParser\versionCompleja9_errors.basm
Nivel de trace: 0
Ejecutando el parser...
Atributos procesados por Loader:
Función: main
ID: 0
Secuencia: [
  {
    "type": "FunctionCall",
    "functionName": "sumList",
    "args": [
      "a",
      {
        "type": "BinaryExpression",
        "left": "from",
        "operator": "+",
        "right": 1,
        "id": 3
      },
      "to",
      {
        "type": "BinaryExpression",
        "left": {
          "type": "ListAccess",
          "identifier": "a",
          "index": "from",
          "id": 4
        },
        "operator": "+",
        "right": "s",
        "id": 5
      }
    ],
    "id": 6
  },
  {
    "type": "ExpressionStatement",
    "expression": {
      "type": "IfThenStatement",
      "condition": {
        "type": "ComparisionExpression",
        "left": "from",
        "operator": "==",
        "right": "to",
        "id": 0
      },
      "thenStatement": {
        "type": "BlockThen",
        "statements": [
          {
            "type": "ExpressionStatement",
            "expression": "s",
            "id": 1
          }
        ],
        "id": 2
      },
      "subsequentStatements": [
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "FunctionCall",
            "functionName": "sumList",
            "args": [
              "a",
              {
                "type": "BinaryExpression",
                "left": "from",
                "operator": "+",
                "right": 1,
                "id": 3
              },
              "to",
              {
                "type": "BinaryExpression",
                "left": {
                  "type": "ListAccess",
                  "identifier": "a",
                  "index": "from",
                  "id": 4
                },
                "operator": "+",
                "right": "s",
                "id": 5
              }
            ],
            "id": 6
          },
          "id": 7
        }
      ],
      "id": 8
    },
    "id": 9
  },
  {
    "type": "Block",
    "statements": [
      {
        "type": "ExpressionStatement",
        "expression": {
          "type": "IfThenStatement",
          "condition": {
            "type": "ComparisionExpression",
            "left": "from",
            "operator": "==",
            "right": "to",
            "id": 0
          },
          "thenStatement": {
            "type": "BlockThen",
            "statements": [
              {
                "type": "ExpressionStatement",
                "expression": "s",
                "id": 1
              }
            ],
            "id": 2
          },
          "subsequentStatements": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "FunctionCall",
                "functionName": "sumList",
                "args": [
                  "a",
                  {
                    "type": "BinaryExpression",
                    "left": "from",
                    "operator": "+",
                    "right": 1,
                    "id": 3
                  },
                  "to",
                  {
                    "type": "BinaryExpression",
                    "left": {
                      "type": "ListAccess",
                      "identifier": "a",
                      "index": "from",
                      "id": 4
                    },
                    "operator": "+",
                    "right": "s",
                    "id": 5
                  }
                ],
                "id": 6
              },
              "id": 7
            }
          ],
          "id": 8
        },
        "id": 9
      }
    ],
    "id": 10
  },
  {
    "type": "FunctionDeclaration",
    "name": "sumList",
    "params": [
      "a",
      "from",
      "to",
      "s"
    ],
    "body": {
      "type": "Block",
      "statements": [
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "IfThenStatement",
            "condition": {
              "type": "ComparisionExpression",
              "left": "from",
              "operator": "==",
              "right": "to",
              "id": 0
            },
            "thenStatement": {
              "type": "BlockThen",
              "statements": [
                {
                  "type": "ExpressionStatement",
                  "expression": "s",
                  "id": 1
                }
              ],
              "id": 2
            },
            "subsequentStatements": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionCall",
                  "functionName": "sumList",
                  "args": [
                    "a",
                    {
                      "type": "BinaryExpression",
                      "left": "from",
                      "operator": "+",
                      "right": 1,
                      "id": 3
                    },
                    "to",
                    {
                      "type": "BinaryExpression",
                      "left": {
                        "type": "ListAccess",
                        "identifier": "a",
                        "index": "from",
                        "id": 4
                      },
                      "operator": "+",
                      "right": "s",
                      "id": 5
                    }
                  ],
                  "id": 6
                },
                "id": 7
              }
            ],
            "id": 8
          },
          "id": 9
        }
      ],
      "id": 10
    },
    "id": 14
  },
  {
    "type": "FunctionCall",
    "functionName": "sumList",
    "args": [
      "a",
      0,
      "n",
      0
    ],
    "id": 15
  },
  {
    "type": "ExpressionStatement",
    "expression": {
      "type": "FunctionCall",
      "functionName": "sumList",
      "args": [
        "a",
        0,
        "n",
        0
      ],
      "id": 15
    },
    "id": 16
  },
  {
    "type": "Block",
    "statements": [
      {
        "type": "ExpressionStatement",
        "expression": {
          "type": "FunctionCall",
          "functionName": "sumList",
          "args": [
            "a",
            0,
            "n",
            0
          ],
          "id": 15
        },
        "id": 16
      }
    ],
    "id": 17
  },
  {
    "type": "FunctionDeclaration",
    "name": "sumListShort",
    "params": [
      "a",
      "n"
    ],
    "body": {
      "type": "Block",
      "statements": [
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "FunctionCall",
            "functionName": "sumList",
            "args": [
              "a",
              0,
              "n",
              0
            ],
            "id": 15
          },
          "id": 16
        }
      ],
      "id": 17
    },
    "id": 21
  },
  {
    "type": "LetInDeclaration",
    "declarations": [
      {
        "type": "ConstDeclaration",
        "name": "a",
        "value": [
          1,
          2,
          3,
          4,
          5
        ],
        "id": 23
      },
      {
        "type": "ConstDeclaration",
        "name": "from",
        "value": 0,
        "id": 24
      },
      {
        "type": "ConstDeclaration",
        "name": "to",
        "value": 3,
        "id": 25
      }
    ],
    "body": {
      "type": "Block",
      "statements": [
        {
          "type": "PrintStatement",
          "args": [
            {
              "type": "BinaryExpression",
              "left": {
                "type": "BinaryExpression",
                "left": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "BinaryExpression",
                    "left": {
                      "type": "BinaryExpression",
                      "left": {
                        "type": "BinaryExpression",
                        "left": "*** Testing sumList(",
                        "operator": "+",
                        "right": "a",
                        "id": 26
                      },
                      "operator": "+",
                      "right": " ,",
                      "id": 27
                    },
                    "operator": "+",
                    "right": "from",
                    "id": 28
                  },
                  "operator": "+",
                  "right": ", ",
                  "id": 29
                },
                "operator": "+",
                "right": "to",
                "id": 30
              },
              "operator": "+",
              "right": ") ***",
              "id": 31
            }
          ],
          "id": 32
        },
        {
          "type": "PrintStatement",
          "args": [
            {
              "type": "FunctionCall",
              "functionName": "sumList",
              "args": [
                "a",
                "from",
                "to",
                0
              ],
              "id": 33
            }
          ],
          "id": 34
        },
        {
          "type": "PrintStatement",
          "args": [
            {
              "type": "FunctionCall",
              "functionName": "sumListShort",
              "args": [
                "a",
                "to"
              ],
              "id": 35
            }
          ],
          "id": 36
        }
      ],
      "id": 37
    },
    "id": 22
  }
]
====================================
Función: sumList
ID: 1
Secuencia: [
  {
    "type": "Block",
    "statements": {
      "type": "ReturnStatement",
      "value": {
        "type": "LambdaExpression",
        "params": [
          "a",
          "from",
          "to",
          "s"
        ],
        "body": {
          "type": "Block",
          "statements": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "IfThenStatement",
                "condition": {
                  "type": "ComparisionExpression",
                  "left": "from",
                  "operator": "==",
                  "right": "to",
                  "id": 0
                },
                "thenStatement": {
                  "type": "BlockThen",
                  "statements": [
                    {
                      "type": "ExpressionStatement",
                      "expression": "s",
                      "id": 1
                    }
                  ],
                  "id": 2
                },
                "subsequentStatements": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "FunctionCall",
                      "functionName": "sumList",
                      "args": [
                        "a",
                        {
                          "type": "BinaryExpression",
                          "left": "from",
                          "operator": "+",
                          "right": 1,
                          "id": 3
                        },
                        "to",
                        {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "ListAccess",
                            "identifier": "a",
                            "index": "from",
                            "id": 4
                          },
                          "operator": "+",
                          "right": "s",
                          "id": 5
                        }
                      ],
                      "id": 6
                    },
                    "id": 7
                  }
                ],
                "id": 8
              },
              "id": 9
            }
          ],
          "id": 10
        },
        "id": 11
      },
      "id": 12
    },
    "id": 13
  }
]
====================================
Función: sumListShort
ID: 2
Secuencia: [
  {
    "type": "Block",
    "statements": {
      "type": "ReturnStatement",
      "value": {
        "type": "LambdaExpression",
        "params": [
          "a",
          "n"
        ],
        "body": {
          "type": "Block",
          "statements": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "FunctionCall",
                "functionName": "sumList",
                "args": [
                  "a",
                  0,
                  "n",
                  0
                ],
                "id": 15
              },
              "id": 16
            }
          ],
          "id": 17
        },
        "id": 18
      },
      "id": 19
    },
    "id": 20
  }
]
====================================
Ejecución completada con éxito. Salida en: outputsParser\versionCompleja9_output.basm
